// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Storage storage
//
// swagger:model Storage
type Storage struct {

	// address
	Address string `json:"address,omitempty"`

	// can restore
	CanRestore bool `json:"can_restore,omitempty"`

	// client id
	ClientID int64 `json:"client_id,omitempty"`

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// credentials
	Credentials *Credentials `json:"credentials,omitempty"`

	// custom config file
	CustomConfigFile bool `json:"custom_config_file,omitempty"`

	// deleted at
	DeletedAt string `json:"deleted_at,omitempty"`

	// disable http
	DisableHTTP bool `json:"disable_http,omitempty"`

	// expires
	Expires string `json:"expires,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// location
	// Enum: [s-ed1 s-ws1 ams sin fra mia]
	Location string `json:"location,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// provisioning status
	ProvisioningStatus string `json:"provisioning_status,omitempty"`

	// reseller id
	ResellerID int64 `json:"reseller_id,omitempty"`

	// rewrite rules
	RewriteRules map[string]string `json:"rewrite_rules,omitempty"`

	// server alias
	ServerAlias string `json:"server_alias,omitempty"`

	// type
	// Enum: [sftp s3]
	Type string `json:"type,omitempty"`
}

// Validate validates this storage
func (m *Storage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Storage) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

var storageTypeLocationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["s-ed1","s-ws1","ams","sin","fra","mia"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageTypeLocationPropEnum = append(storageTypeLocationPropEnum, v)
	}
}

const (

	// StorageLocationSDashEd1 captures enum value "s-ed1"
	StorageLocationSDashEd1 string = "s-ed1"

	// StorageLocationSDashWs1 captures enum value "s-ws1"
	StorageLocationSDashWs1 string = "s-ws1"

	// StorageLocationAms captures enum value "ams"
	StorageLocationAms string = "ams"

	// StorageLocationSin captures enum value "sin"
	StorageLocationSin string = "sin"

	// StorageLocationFra captures enum value "fra"
	StorageLocationFra string = "fra"

	// StorageLocationMia captures enum value "mia"
	StorageLocationMia string = "mia"
)

// prop value enum
func (m *Storage) validateLocationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageTypeLocationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Storage) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	// value enum
	if err := m.validateLocationEnum("location", "body", m.Location); err != nil {
		return err
	}

	return nil
}

var storageTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sftp","s3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageTypeTypePropEnum = append(storageTypeTypePropEnum, v)
	}
}

const (

	// StorageTypeSftp captures enum value "sftp"
	StorageTypeSftp string = "sftp"

	// StorageTypeS3 captures enum value "s3"
	StorageTypeS3 string = "s3"
)

// prop value enum
func (m *Storage) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Storage) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this storage based on the context it is used
func (m *Storage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Storage) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.Credentials != nil {
		if err := m.Credentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Storage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Storage) UnmarshalBinary(b []byte) error {
	var res Storage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
