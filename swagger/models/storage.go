// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Storage storage
//
// swagger:model Storage
type Storage struct {

	// Storage address
	Address string `json:"address,omitempty"`

	// Indicates whether storage can be recovered after deletion.<br>
	// Has one of the values:<ul>
	// <li><b>true</b> — this storage can be recovered within 2 weeks of deletion;</li>
	// <li><b>false</b> — this storage cannot be recovered anymore</li>
	// </ul>
	CanRestore bool `json:"can_restore,omitempty"`

	// Client ID
	// Example: 2345
	ClientID int64 `json:"client_id,omitempty"`

	// Storage creation date and time in ISO 8601, UTC format
	// Example: 2022-07-21 12:00:04.103287
	CreatedAt string `json:"created_at,omitempty"`

	// credentials
	Credentials *Credentials `json:"credentials,omitempty"`

	// custom config file
	CustomConfigFile bool `json:"custom_config_file,omitempty"`

	// Storage deletion date and time in ISO 8601, UTC format
	// Example: 2022-07-25 12:00:45.102487
	DeletedAt string `json:"deleted_at,omitempty"`

	// Is disabled http access to storage without credentials
	DisableHTTP bool `json:"disable_http,omitempty"`

	// expires
	Expires string `json:"expires,omitempty"`

	// Storage ID
	// Example: 123
	ID int64 `json:"id,omitempty"`

	// Storage region name
	// Enum: [s-dt2]
	Location string `json:"location,omitempty"`

	// Storage name
	// Example: my-test-storage
	Name string `json:"name,omitempty"`

	// Storage status
	// Enum: [ok deleting updating]
	ProvisioningStatus string `json:"provisioning_status,omitempty"`

	// Reseller ID
	// Example: 4765
	ResellerID int64 `json:"reseller_id,omitempty"`

	// rewrite rules
	RewriteRules map[string]string `json:"rewrite_rules,omitempty"`

	// server alias
	ServerAlias string `json:"server_alias,omitempty"`

	// Type of storage
	// Enum: [s3]
	Type string `json:"type,omitempty"`
}

// Validate validates this storage
func (m *Storage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvisioningStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Storage) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

var storageTypeLocationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["s-dt2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageTypeLocationPropEnum = append(storageTypeLocationPropEnum, v)
	}
}

const (

	// StorageLocationSDashDt2 captures enum value "s-dt2"
	StorageLocationSDashDt2 string = "s-dt2"
)

// prop value enum
func (m *Storage) validateLocationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageTypeLocationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Storage) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	// value enum
	if err := m.validateLocationEnum("location", "body", m.Location); err != nil {
		return err
	}

	return nil
}

var storageTypeProvisioningStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","deleting","updating"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageTypeProvisioningStatusPropEnum = append(storageTypeProvisioningStatusPropEnum, v)
	}
}

const (

	// StorageProvisioningStatusOk captures enum value "ok"
	StorageProvisioningStatusOk string = "ok"

	// StorageProvisioningStatusDeleting captures enum value "deleting"
	StorageProvisioningStatusDeleting string = "deleting"

	// StorageProvisioningStatusUpdating captures enum value "updating"
	StorageProvisioningStatusUpdating string = "updating"
)

// prop value enum
func (m *Storage) validateProvisioningStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageTypeProvisioningStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Storage) validateProvisioningStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ProvisioningStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateProvisioningStatusEnum("provisioning_status", "body", m.ProvisioningStatus); err != nil {
		return err
	}

	return nil
}

var storageTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["s3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageTypeTypePropEnum = append(storageTypeTypePropEnum, v)
	}
}

const (

	// StorageTypeS3 captures enum value "s3"
	StorageTypeS3 string = "s3"
)

// prop value enum
func (m *Storage) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Storage) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this storage based on the context it is used
func (m *Storage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Storage) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.Credentials != nil {

		if swag.IsZero(m.Credentials) { // not required
			return nil
		}

		if err := m.Credentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Storage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Storage) UnmarshalBinary(b []byte) error {
	var res Storage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
