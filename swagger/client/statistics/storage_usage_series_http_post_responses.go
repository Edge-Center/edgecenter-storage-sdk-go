// Code generated by go-swagger; DO NOT EDIT.

package statistics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/Edge-Center/edgecenter-storage-sdk-go/swagger/models"
)

// StorageUsageSeriesHTTPPostReader is a Reader for the StorageUsageSeriesHTTPPost structure.
type StorageUsageSeriesHTTPPostReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StorageUsageSeriesHTTPPostReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStorageUsageSeriesHTTPPostOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStorageUsageSeriesHTTPPostBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /stats/v1/storage/usage/series] storageUsageSeriesHttpPost", response, response.Code())
	}
}

// NewStorageUsageSeriesHTTPPostOK creates a StorageUsageSeriesHTTPPostOK with default headers values
func NewStorageUsageSeriesHTTPPostOK() *StorageUsageSeriesHTTPPostOK {
	return &StorageUsageSeriesHTTPPostOK{}
}

/*
StorageUsageSeriesHTTPPostOK describes a response with status code 200, with default header values.

StorageUsageSeriesEndpointRes
*/
type StorageUsageSeriesHTTPPostOK struct {
	Payload *models.StorageUsageSeriesEndpointRes
}

// IsSuccess returns true when this storage usage series Http post o k response has a 2xx status code
func (o *StorageUsageSeriesHTTPPostOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this storage usage series Http post o k response has a 3xx status code
func (o *StorageUsageSeriesHTTPPostOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this storage usage series Http post o k response has a 4xx status code
func (o *StorageUsageSeriesHTTPPostOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this storage usage series Http post o k response has a 5xx status code
func (o *StorageUsageSeriesHTTPPostOK) IsServerError() bool {
	return false
}

// IsCode returns true when this storage usage series Http post o k response a status code equal to that given
func (o *StorageUsageSeriesHTTPPostOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the storage usage series Http post o k response
func (o *StorageUsageSeriesHTTPPostOK) Code() int {
	return 200
}

func (o *StorageUsageSeriesHTTPPostOK) Error() string {
	return fmt.Sprintf("[POST /stats/v1/storage/usage/series][%d] storageUsageSeriesHttpPostOK  %+v", 200, o.Payload)
}

func (o *StorageUsageSeriesHTTPPostOK) String() string {
	return fmt.Sprintf("[POST /stats/v1/storage/usage/series][%d] storageUsageSeriesHttpPostOK  %+v", 200, o.Payload)
}

func (o *StorageUsageSeriesHTTPPostOK) GetPayload() *models.StorageUsageSeriesEndpointRes {
	return o.Payload
}

func (o *StorageUsageSeriesHTTPPostOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.StorageUsageSeriesEndpointRes)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStorageUsageSeriesHTTPPostBadRequest creates a StorageUsageSeriesHTTPPostBadRequest with default headers values
func NewStorageUsageSeriesHTTPPostBadRequest() *StorageUsageSeriesHTTPPostBadRequest {
	return &StorageUsageSeriesHTTPPostBadRequest{}
}

/*
StorageUsageSeriesHTTPPostBadRequest describes a response with status code 400, with default header values.

ErrResponse
*/
type StorageUsageSeriesHTTPPostBadRequest struct {
	Payload *models.ErrResponse
}

// IsSuccess returns true when this storage usage series Http post bad request response has a 2xx status code
func (o *StorageUsageSeriesHTTPPostBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this storage usage series Http post bad request response has a 3xx status code
func (o *StorageUsageSeriesHTTPPostBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this storage usage series Http post bad request response has a 4xx status code
func (o *StorageUsageSeriesHTTPPostBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this storage usage series Http post bad request response has a 5xx status code
func (o *StorageUsageSeriesHTTPPostBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this storage usage series Http post bad request response a status code equal to that given
func (o *StorageUsageSeriesHTTPPostBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the storage usage series Http post bad request response
func (o *StorageUsageSeriesHTTPPostBadRequest) Code() int {
	return 400
}

func (o *StorageUsageSeriesHTTPPostBadRequest) Error() string {
	return fmt.Sprintf("[POST /stats/v1/storage/usage/series][%d] storageUsageSeriesHttpPostBadRequest  %+v", 400, o.Payload)
}

func (o *StorageUsageSeriesHTTPPostBadRequest) String() string {
	return fmt.Sprintf("[POST /stats/v1/storage/usage/series][%d] storageUsageSeriesHttpPostBadRequest  %+v", 400, o.Payload)
}

func (o *StorageUsageSeriesHTTPPostBadRequest) GetPayload() *models.ErrResponse {
	return o.Payload
}

func (o *StorageUsageSeriesHTTPPostBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
StorageUsageSeriesHTTPPostBody storage usage series HTTP post body
swagger:model StorageUsageSeriesHTTPPostBody
*/
type StorageUsageSeriesHTTPPostBody struct {

	// Specify the starting point of the required period (YYYY-MM-DD format)
	// Example: 2023-01-15
	From string `json:"from,omitempty"`

	// Set the time intervals for grouping the data.
	// Valid time units are "s", "m", "h"
	// Example: 6h
	Granularity string `json:"granularity,omitempty"`

	// Specify the storage locations for grouping the data
	// Example: ["s-dt2"]
	Locations []string `json:"locations"`

	// Specify the storage names for grouping the data
	// Example: ["4554-test-storage"]
	Storages []string `json:"storages"`

	// Specify the end of the required period (YYYY-MM-DD format)
	// Example: 2023-04-03
	To string `json:"to,omitempty"`

	// Decide whether to convert the response time format from the UNIX timestamp (1673809200) to RFC3339 (2023-01-15T19:00:00Z).<br>
	// Choose one of the values:<ul>
	// <li><b>true</b> — to convert the time to RFC3339 format;</li>
	// <li><b>false</b> — to leave the time in the UNIX timestamp format</li>
	// </ul>
	TsString bool `json:"ts_string,omitempty"`
}

// Validate validates this storage usage series HTTP post body
func (o *StorageUsageSeriesHTTPPostBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this storage usage series HTTP post body based on context it is used
func (o *StorageUsageSeriesHTTPPostBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StorageUsageSeriesHTTPPostBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StorageUsageSeriesHTTPPostBody) UnmarshalBinary(b []byte) error {
	var res StorageUsageSeriesHTTPPostBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
