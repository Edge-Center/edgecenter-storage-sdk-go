// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Edge-Center/edgecenter-storage-sdk-go/swagger/models"
)

// EventsMetaHTTPReader is a Reader for the EventsMetaHTTP structure.
type EventsMetaHTTPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EventsMetaHTTPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEventsMetaHTTPOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEventsMetaHTTPBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewEventsMetaHTTPUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewEventsMetaHTTPConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewEventsMetaHTTPOK creates a EventsMetaHTTPOK with default headers values
func NewEventsMetaHTTPOK() *EventsMetaHTTPOK {
	return &EventsMetaHTTPOK{}
}

/*
EventsMetaHTTPOK describes a response with status code 200, with default header values.

EventsMetaResponse
*/
type EventsMetaHTTPOK struct {
	Payload *models.EventsMetaResponse
}

// IsSuccess returns true when this events meta Http o k response has a 2xx status code
func (o *EventsMetaHTTPOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this events meta Http o k response has a 3xx status code
func (o *EventsMetaHTTPOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this events meta Http o k response has a 4xx status code
func (o *EventsMetaHTTPOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this events meta Http o k response has a 5xx status code
func (o *EventsMetaHTTPOK) IsServerError() bool {
	return false
}

// IsCode returns true when this events meta Http o k response a status code equal to that given
func (o *EventsMetaHTTPOK) IsCode(code int) bool {
	return code == 200
}

func (o *EventsMetaHTTPOK) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/events/configurator][%d] eventsMetaHttpOK  %+v", 200, o.Payload)
}

func (o *EventsMetaHTTPOK) String() string {
	return fmt.Sprintf("[GET /notifications/v1/events/configurator][%d] eventsMetaHttpOK  %+v", 200, o.Payload)
}

func (o *EventsMetaHTTPOK) GetPayload() *models.EventsMetaResponse {
	return o.Payload
}

func (o *EventsMetaHTTPOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EventsMetaResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEventsMetaHTTPBadRequest creates a EventsMetaHTTPBadRequest with default headers values
func NewEventsMetaHTTPBadRequest() *EventsMetaHTTPBadRequest {
	return &EventsMetaHTTPBadRequest{}
}

/*
EventsMetaHTTPBadRequest describes a response with status code 400, with default header values.

ErrResponse
*/
type EventsMetaHTTPBadRequest struct {
	Payload *models.ErrResponse
}

// IsSuccess returns true when this events meta Http bad request response has a 2xx status code
func (o *EventsMetaHTTPBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this events meta Http bad request response has a 3xx status code
func (o *EventsMetaHTTPBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this events meta Http bad request response has a 4xx status code
func (o *EventsMetaHTTPBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this events meta Http bad request response has a 5xx status code
func (o *EventsMetaHTTPBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this events meta Http bad request response a status code equal to that given
func (o *EventsMetaHTTPBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *EventsMetaHTTPBadRequest) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/events/configurator][%d] eventsMetaHttpBadRequest  %+v", 400, o.Payload)
}

func (o *EventsMetaHTTPBadRequest) String() string {
	return fmt.Sprintf("[GET /notifications/v1/events/configurator][%d] eventsMetaHttpBadRequest  %+v", 400, o.Payload)
}

func (o *EventsMetaHTTPBadRequest) GetPayload() *models.ErrResponse {
	return o.Payload
}

func (o *EventsMetaHTTPBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEventsMetaHTTPUnauthorized creates a EventsMetaHTTPUnauthorized with default headers values
func NewEventsMetaHTTPUnauthorized() *EventsMetaHTTPUnauthorized {
	return &EventsMetaHTTPUnauthorized{}
}

/*
EventsMetaHTTPUnauthorized describes a response with status code 401, with default header values.

ErrResponse
*/
type EventsMetaHTTPUnauthorized struct {
	Payload *models.ErrResponse
}

// IsSuccess returns true when this events meta Http unauthorized response has a 2xx status code
func (o *EventsMetaHTTPUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this events meta Http unauthorized response has a 3xx status code
func (o *EventsMetaHTTPUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this events meta Http unauthorized response has a 4xx status code
func (o *EventsMetaHTTPUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this events meta Http unauthorized response has a 5xx status code
func (o *EventsMetaHTTPUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this events meta Http unauthorized response a status code equal to that given
func (o *EventsMetaHTTPUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *EventsMetaHTTPUnauthorized) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/events/configurator][%d] eventsMetaHttpUnauthorized  %+v", 401, o.Payload)
}

func (o *EventsMetaHTTPUnauthorized) String() string {
	return fmt.Sprintf("[GET /notifications/v1/events/configurator][%d] eventsMetaHttpUnauthorized  %+v", 401, o.Payload)
}

func (o *EventsMetaHTTPUnauthorized) GetPayload() *models.ErrResponse {
	return o.Payload
}

func (o *EventsMetaHTTPUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEventsMetaHTTPConflict creates a EventsMetaHTTPConflict with default headers values
func NewEventsMetaHTTPConflict() *EventsMetaHTTPConflict {
	return &EventsMetaHTTPConflict{}
}

/*
EventsMetaHTTPConflict describes a response with status code 409, with default header values.

ErrResponse
*/
type EventsMetaHTTPConflict struct {
	Payload *models.ErrResponse
}

// IsSuccess returns true when this events meta Http conflict response has a 2xx status code
func (o *EventsMetaHTTPConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this events meta Http conflict response has a 3xx status code
func (o *EventsMetaHTTPConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this events meta Http conflict response has a 4xx status code
func (o *EventsMetaHTTPConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this events meta Http conflict response has a 5xx status code
func (o *EventsMetaHTTPConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this events meta Http conflict response a status code equal to that given
func (o *EventsMetaHTTPConflict) IsCode(code int) bool {
	return code == 409
}

func (o *EventsMetaHTTPConflict) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/events/configurator][%d] eventsMetaHttpConflict  %+v", 409, o.Payload)
}

func (o *EventsMetaHTTPConflict) String() string {
	return fmt.Sprintf("[GET /notifications/v1/events/configurator][%d] eventsMetaHttpConflict  %+v", 409, o.Payload)
}

func (o *EventsMetaHTTPConflict) GetPayload() *models.ErrResponse {
	return o.Payload
}

func (o *EventsMetaHTTPConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
