// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Edge-Center/edgecenter-storage-sdk-go/swagger/models"
)

// EventCreateHTTPReader is a Reader for the EventCreateHTTP structure.
type EventCreateHTTPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EventCreateHTTPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEventCreateHTTPOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEventCreateHTTPBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewEventCreateHTTPUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewEventCreateHTTPConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewEventCreateHTTPOK creates a EventCreateHTTPOK with default headers values
func NewEventCreateHTTPOK() *EventCreateHTTPOK {
	return &EventCreateHTTPOK{}
}

/*
EventCreateHTTPOK describes a response with status code 200, with default header values.

EventResponse
*/
type EventCreateHTTPOK struct {
	Payload *models.EventResponse
}

// IsSuccess returns true when this event create Http o k response has a 2xx status code
func (o *EventCreateHTTPOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this event create Http o k response has a 3xx status code
func (o *EventCreateHTTPOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this event create Http o k response has a 4xx status code
func (o *EventCreateHTTPOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this event create Http o k response has a 5xx status code
func (o *EventCreateHTTPOK) IsServerError() bool {
	return false
}

// IsCode returns true when this event create Http o k response a status code equal to that given
func (o *EventCreateHTTPOK) IsCode(code int) bool {
	return code == 200
}

func (o *EventCreateHTTPOK) Error() string {
	return fmt.Sprintf("[POST /notifications/v1/event][%d] eventCreateHttpOK  %+v", 200, o.Payload)
}

func (o *EventCreateHTTPOK) String() string {
	return fmt.Sprintf("[POST /notifications/v1/event][%d] eventCreateHttpOK  %+v", 200, o.Payload)
}

func (o *EventCreateHTTPOK) GetPayload() *models.EventResponse {
	return o.Payload
}

func (o *EventCreateHTTPOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EventResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEventCreateHTTPBadRequest creates a EventCreateHTTPBadRequest with default headers values
func NewEventCreateHTTPBadRequest() *EventCreateHTTPBadRequest {
	return &EventCreateHTTPBadRequest{}
}

/*
EventCreateHTTPBadRequest describes a response with status code 400, with default header values.

ErrResponse
*/
type EventCreateHTTPBadRequest struct {
	Payload *models.ErrResponse
}

// IsSuccess returns true when this event create Http bad request response has a 2xx status code
func (o *EventCreateHTTPBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this event create Http bad request response has a 3xx status code
func (o *EventCreateHTTPBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this event create Http bad request response has a 4xx status code
func (o *EventCreateHTTPBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this event create Http bad request response has a 5xx status code
func (o *EventCreateHTTPBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this event create Http bad request response a status code equal to that given
func (o *EventCreateHTTPBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *EventCreateHTTPBadRequest) Error() string {
	return fmt.Sprintf("[POST /notifications/v1/event][%d] eventCreateHttpBadRequest  %+v", 400, o.Payload)
}

func (o *EventCreateHTTPBadRequest) String() string {
	return fmt.Sprintf("[POST /notifications/v1/event][%d] eventCreateHttpBadRequest  %+v", 400, o.Payload)
}

func (o *EventCreateHTTPBadRequest) GetPayload() *models.ErrResponse {
	return o.Payload
}

func (o *EventCreateHTTPBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEventCreateHTTPUnauthorized creates a EventCreateHTTPUnauthorized with default headers values
func NewEventCreateHTTPUnauthorized() *EventCreateHTTPUnauthorized {
	return &EventCreateHTTPUnauthorized{}
}

/*
EventCreateHTTPUnauthorized describes a response with status code 401, with default header values.

ErrResponse
*/
type EventCreateHTTPUnauthorized struct {
	Payload *models.ErrResponse
}

// IsSuccess returns true when this event create Http unauthorized response has a 2xx status code
func (o *EventCreateHTTPUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this event create Http unauthorized response has a 3xx status code
func (o *EventCreateHTTPUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this event create Http unauthorized response has a 4xx status code
func (o *EventCreateHTTPUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this event create Http unauthorized response has a 5xx status code
func (o *EventCreateHTTPUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this event create Http unauthorized response a status code equal to that given
func (o *EventCreateHTTPUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *EventCreateHTTPUnauthorized) Error() string {
	return fmt.Sprintf("[POST /notifications/v1/event][%d] eventCreateHttpUnauthorized  %+v", 401, o.Payload)
}

func (o *EventCreateHTTPUnauthorized) String() string {
	return fmt.Sprintf("[POST /notifications/v1/event][%d] eventCreateHttpUnauthorized  %+v", 401, o.Payload)
}

func (o *EventCreateHTTPUnauthorized) GetPayload() *models.ErrResponse {
	return o.Payload
}

func (o *EventCreateHTTPUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEventCreateHTTPConflict creates a EventCreateHTTPConflict with default headers values
func NewEventCreateHTTPConflict() *EventCreateHTTPConflict {
	return &EventCreateHTTPConflict{}
}

/*
EventCreateHTTPConflict describes a response with status code 409, with default header values.

ErrResponse
*/
type EventCreateHTTPConflict struct {
	Payload *models.ErrResponse
}

// IsSuccess returns true when this event create Http conflict response has a 2xx status code
func (o *EventCreateHTTPConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this event create Http conflict response has a 3xx status code
func (o *EventCreateHTTPConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this event create Http conflict response has a 4xx status code
func (o *EventCreateHTTPConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this event create Http conflict response has a 5xx status code
func (o *EventCreateHTTPConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this event create Http conflict response a status code equal to that given
func (o *EventCreateHTTPConflict) IsCode(code int) bool {
	return code == 409
}

func (o *EventCreateHTTPConflict) Error() string {
	return fmt.Sprintf("[POST /notifications/v1/event][%d] eventCreateHttpConflict  %+v", 409, o.Payload)
}

func (o *EventCreateHTTPConflict) String() string {
	return fmt.Sprintf("[POST /notifications/v1/event][%d] eventCreateHttpConflict  %+v", 409, o.Payload)
}

func (o *EventCreateHTTPConflict) GetPayload() *models.ErrResponse {
	return o.Payload
}

func (o *EventCreateHTTPConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
