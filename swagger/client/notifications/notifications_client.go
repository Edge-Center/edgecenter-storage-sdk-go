// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new notifications API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for notifications API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	EventCreateHTTP(params *EventCreateHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EventCreateHTTPOK, error)

	EventDeleteHTTP(params *EventDeleteHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EventDeleteHTTPNoContent, error)

	EventUpdateHTTP(params *EventUpdateHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EventUpdateHTTPNoContent, error)

	EventsCreateHTTP(params *EventsCreateHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EventsCreateHTTPOK, error)

	EventsGetHTTP(params *EventsGetHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EventsGetHTTPOK, error)

	EventsMetaHTTP(params *EventsMetaHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EventsMetaHTTPOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
EventCreateHTTP adds client event
*/
func (a *Client) EventCreateHTTP(params *EventCreateHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EventCreateHTTPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEventCreateHTTPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "eventCreateHttp",
		Method:             "POST",
		PathPattern:        "/notifications/v1/event",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EventCreateHTTPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EventCreateHTTPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for eventCreateHttp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EventDeleteHTTP deletes client event
*/
func (a *Client) EventDeleteHTTP(params *EventDeleteHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EventDeleteHTTPNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEventDeleteHTTPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "eventDeleteHttp",
		Method:             "DELETE",
		PathPattern:        "/notifications/v1/event",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EventDeleteHTTPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EventDeleteHTTPNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for eventDeleteHttp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EventUpdateHTTP changes client event
*/
func (a *Client) EventUpdateHTTP(params *EventUpdateHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EventUpdateHTTPNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEventUpdateHTTPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "eventUpdateHttp",
		Method:             "PUT",
		PathPattern:        "/notifications/v1/event",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EventUpdateHTTPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EventUpdateHTTPNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for eventUpdateHttp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	EventsCreateHTTP upserts patch client events

	When you set body be notice that fields of root structure will be created or updated

but another fields will be no affected.
Returns client events.
*/
func (a *Client) EventsCreateHTTP(params *EventsCreateHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EventsCreateHTTPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEventsCreateHTTPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "eventsCreateHttp",
		Method:             "POST",
		PathPattern:        "/notifications/v1/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EventsCreateHTTPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EventsCreateHTTPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for eventsCreateHttp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EventsGetHTTP gets events

Returns client events
*/
func (a *Client) EventsGetHTTP(params *EventsGetHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EventsGetHTTPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEventsGetHTTPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "eventsGetHttp",
		Method:             "GET",
		PathPattern:        "/notifications/v1/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EventsGetHTTPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EventsGetHTTPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for eventsGetHttp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
EventsMetaHTTP gets possible list of events

Returns descriptions about events
*/
func (a *Client) EventsMetaHTTP(params *EventsMetaHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*EventsMetaHTTPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEventsMetaHTTPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "eventsMetaHttp",
		Method:             "GET",
		PathPattern:        "/notifications/v1/events/configurator",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EventsMetaHTTPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EventsMetaHTTPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for eventsMetaHttp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
