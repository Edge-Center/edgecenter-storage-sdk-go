// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Edge-Center/edgecenter-storage-sdk-go/swagger/models"
)

// EventUpdateHTTPReader is a Reader for the EventUpdateHTTP structure.
type EventUpdateHTTPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EventUpdateHTTPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewEventUpdateHTTPNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEventUpdateHTTPBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewEventUpdateHTTPUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewEventUpdateHTTPConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewEventUpdateHTTPNoContent creates a EventUpdateHTTPNoContent with default headers values
func NewEventUpdateHTTPNoContent() *EventUpdateHTTPNoContent {
	return &EventUpdateHTTPNoContent{}
}

/*
EventUpdateHTTPNoContent describes a response with status code 204, with default header values.

A SuccessResponse is a response that shows that operations was completed successfully
*/
type EventUpdateHTTPNoContent struct {
}

// IsSuccess returns true when this event update Http no content response has a 2xx status code
func (o *EventUpdateHTTPNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this event update Http no content response has a 3xx status code
func (o *EventUpdateHTTPNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this event update Http no content response has a 4xx status code
func (o *EventUpdateHTTPNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this event update Http no content response has a 5xx status code
func (o *EventUpdateHTTPNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this event update Http no content response a status code equal to that given
func (o *EventUpdateHTTPNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *EventUpdateHTTPNoContent) Error() string {
	return fmt.Sprintf("[PUT /notifications/v1/event][%d] eventUpdateHttpNoContent ", 204)
}

func (o *EventUpdateHTTPNoContent) String() string {
	return fmt.Sprintf("[PUT /notifications/v1/event][%d] eventUpdateHttpNoContent ", 204)
}

func (o *EventUpdateHTTPNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEventUpdateHTTPBadRequest creates a EventUpdateHTTPBadRequest with default headers values
func NewEventUpdateHTTPBadRequest() *EventUpdateHTTPBadRequest {
	return &EventUpdateHTTPBadRequest{}
}

/*
EventUpdateHTTPBadRequest describes a response with status code 400, with default header values.

ErrResponse
*/
type EventUpdateHTTPBadRequest struct {
	Payload *models.ErrResponse
}

// IsSuccess returns true when this event update Http bad request response has a 2xx status code
func (o *EventUpdateHTTPBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this event update Http bad request response has a 3xx status code
func (o *EventUpdateHTTPBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this event update Http bad request response has a 4xx status code
func (o *EventUpdateHTTPBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this event update Http bad request response has a 5xx status code
func (o *EventUpdateHTTPBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this event update Http bad request response a status code equal to that given
func (o *EventUpdateHTTPBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *EventUpdateHTTPBadRequest) Error() string {
	return fmt.Sprintf("[PUT /notifications/v1/event][%d] eventUpdateHttpBadRequest  %+v", 400, o.Payload)
}

func (o *EventUpdateHTTPBadRequest) String() string {
	return fmt.Sprintf("[PUT /notifications/v1/event][%d] eventUpdateHttpBadRequest  %+v", 400, o.Payload)
}

func (o *EventUpdateHTTPBadRequest) GetPayload() *models.ErrResponse {
	return o.Payload
}

func (o *EventUpdateHTTPBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEventUpdateHTTPUnauthorized creates a EventUpdateHTTPUnauthorized with default headers values
func NewEventUpdateHTTPUnauthorized() *EventUpdateHTTPUnauthorized {
	return &EventUpdateHTTPUnauthorized{}
}

/*
EventUpdateHTTPUnauthorized describes a response with status code 401, with default header values.

ErrResponse
*/
type EventUpdateHTTPUnauthorized struct {
	Payload *models.ErrResponse
}

// IsSuccess returns true when this event update Http unauthorized response has a 2xx status code
func (o *EventUpdateHTTPUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this event update Http unauthorized response has a 3xx status code
func (o *EventUpdateHTTPUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this event update Http unauthorized response has a 4xx status code
func (o *EventUpdateHTTPUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this event update Http unauthorized response has a 5xx status code
func (o *EventUpdateHTTPUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this event update Http unauthorized response a status code equal to that given
func (o *EventUpdateHTTPUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *EventUpdateHTTPUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /notifications/v1/event][%d] eventUpdateHttpUnauthorized  %+v", 401, o.Payload)
}

func (o *EventUpdateHTTPUnauthorized) String() string {
	return fmt.Sprintf("[PUT /notifications/v1/event][%d] eventUpdateHttpUnauthorized  %+v", 401, o.Payload)
}

func (o *EventUpdateHTTPUnauthorized) GetPayload() *models.ErrResponse {
	return o.Payload
}

func (o *EventUpdateHTTPUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEventUpdateHTTPConflict creates a EventUpdateHTTPConflict with default headers values
func NewEventUpdateHTTPConflict() *EventUpdateHTTPConflict {
	return &EventUpdateHTTPConflict{}
}

/*
EventUpdateHTTPConflict describes a response with status code 409, with default header values.

ErrResponse
*/
type EventUpdateHTTPConflict struct {
	Payload *models.ErrResponse
}

// IsSuccess returns true when this event update Http conflict response has a 2xx status code
func (o *EventUpdateHTTPConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this event update Http conflict response has a 3xx status code
func (o *EventUpdateHTTPConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this event update Http conflict response has a 4xx status code
func (o *EventUpdateHTTPConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this event update Http conflict response has a 5xx status code
func (o *EventUpdateHTTPConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this event update Http conflict response a status code equal to that given
func (o *EventUpdateHTTPConflict) IsCode(code int) bool {
	return code == 409
}

func (o *EventUpdateHTTPConflict) Error() string {
	return fmt.Sprintf("[PUT /notifications/v1/event][%d] eventUpdateHttpConflict  %+v", 409, o.Payload)
}

func (o *EventUpdateHTTPConflict) String() string {
	return fmt.Sprintf("[PUT /notifications/v1/event][%d] eventUpdateHttpConflict  %+v", 409, o.Payload)
}

func (o *EventUpdateHTTPConflict) GetPayload() *models.ErrResponse {
	return o.Payload
}

func (o *EventUpdateHTTPConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
