// Code generated by go-swagger; DO NOT EDIT.

package storages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/Edge-Center/edgecenter-storage-sdk-go/swagger/models"
)

// StorageUpdateCredentialsHTTPReader is a Reader for the StorageUpdateCredentialsHTTP structure.
type StorageUpdateCredentialsHTTPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StorageUpdateCredentialsHTTPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStorageUpdateCredentialsHTTPOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStorageUpdateCredentialsHTTPBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /resource/v3/storage/{id}/credentials] storageUpdateCredentialsHttp", response, response.Code())
	}
}

// NewStorageUpdateCredentialsHTTPOK creates a StorageUpdateCredentialsHTTPOK with default headers values
func NewStorageUpdateCredentialsHTTPOK() *StorageUpdateCredentialsHTTPOK {
	return &StorageUpdateCredentialsHTTPOK{}
}

/*
StorageUpdateCredentialsHTTPOK describes a response with status code 200, with default header values.

Storage
*/
type StorageUpdateCredentialsHTTPOK struct {
	Payload *models.Storage
}

// IsSuccess returns true when this storage update credentials Http o k response has a 2xx status code
func (o *StorageUpdateCredentialsHTTPOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this storage update credentials Http o k response has a 3xx status code
func (o *StorageUpdateCredentialsHTTPOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this storage update credentials Http o k response has a 4xx status code
func (o *StorageUpdateCredentialsHTTPOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this storage update credentials Http o k response has a 5xx status code
func (o *StorageUpdateCredentialsHTTPOK) IsServerError() bool {
	return false
}

// IsCode returns true when this storage update credentials Http o k response a status code equal to that given
func (o *StorageUpdateCredentialsHTTPOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the storage update credentials Http o k response
func (o *StorageUpdateCredentialsHTTPOK) Code() int {
	return 200
}

func (o *StorageUpdateCredentialsHTTPOK) Error() string {
	return fmt.Sprintf("[POST /resource/v3/storage/{id}/credentials][%d] storageUpdateCredentialsHttpOK  %+v", 200, o.Payload)
}

func (o *StorageUpdateCredentialsHTTPOK) String() string {
	return fmt.Sprintf("[POST /resource/v3/storage/{id}/credentials][%d] storageUpdateCredentialsHttpOK  %+v", 200, o.Payload)
}

func (o *StorageUpdateCredentialsHTTPOK) GetPayload() *models.Storage {
	return o.Payload
}

func (o *StorageUpdateCredentialsHTTPOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Storage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStorageUpdateCredentialsHTTPBadRequest creates a StorageUpdateCredentialsHTTPBadRequest with default headers values
func NewStorageUpdateCredentialsHTTPBadRequest() *StorageUpdateCredentialsHTTPBadRequest {
	return &StorageUpdateCredentialsHTTPBadRequest{}
}

/*
StorageUpdateCredentialsHTTPBadRequest describes a response with status code 400, with default header values.

ErrResponse
*/
type StorageUpdateCredentialsHTTPBadRequest struct {
	Payload *models.ErrResponse
}

// IsSuccess returns true when this storage update credentials Http bad request response has a 2xx status code
func (o *StorageUpdateCredentialsHTTPBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this storage update credentials Http bad request response has a 3xx status code
func (o *StorageUpdateCredentialsHTTPBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this storage update credentials Http bad request response has a 4xx status code
func (o *StorageUpdateCredentialsHTTPBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this storage update credentials Http bad request response has a 5xx status code
func (o *StorageUpdateCredentialsHTTPBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this storage update credentials Http bad request response a status code equal to that given
func (o *StorageUpdateCredentialsHTTPBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the storage update credentials Http bad request response
func (o *StorageUpdateCredentialsHTTPBadRequest) Code() int {
	return 400
}

func (o *StorageUpdateCredentialsHTTPBadRequest) Error() string {
	return fmt.Sprintf("[POST /resource/v3/storage/{id}/credentials][%d] storageUpdateCredentialsHttpBadRequest  %+v", 400, o.Payload)
}

func (o *StorageUpdateCredentialsHTTPBadRequest) String() string {
	return fmt.Sprintf("[POST /resource/v3/storage/{id}/credentials][%d] storageUpdateCredentialsHttpBadRequest  %+v", 400, o.Payload)
}

func (o *StorageUpdateCredentialsHTTPBadRequest) GetPayload() *models.ErrResponse {
	return o.Payload
}

func (o *StorageUpdateCredentialsHTTPBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
StorageUpdateCredentialsHTTPBody storage update credentials HTTP body
swagger:model StorageUpdateCredentialsHTTPBody
*/
type StorageUpdateCredentialsHTTPBody struct {

	// Decide whether to delete the SFTP password.<br>
	// Choose one of the values:<ul>
	// <li><b>true</b> — to delete the SFTP password</li>
	// <li><b>false</b> — not to delete the SFTP password</li>
	// </ul>
	DeleteSftpPassword bool `json:"delete_sftp_password,omitempty"`

	// Specify if new S3 keys should be generated.<br>
	// Choose one of the values:<ul>
	// <li><b>true</b> — to generate the S3 keys;</li>
	// <li><b>false</b> — not to generate the S3 keys</li>
	// </ul>
	GenerateS3Keys bool `json:"generate_s3_keys,omitempty"`

	// Specify if a new SFTP password should be generated.<br>
	// Choose one of the values: <ul>
	// <li><b>true</b> — to generate the SFTP password</li>
	// <li><b>false</b> — not to generate the SFTP password</li>
	// </ul>
	GenerateSftpPassword bool `json:"generate_sftp_password,omitempty"`

	// Decide whether to reset the SFTP keys.<br>
	// Choose one of the values:<ul>
	// <li><b>true</b> — to reset the SFTP keys</li>
	// <li><b>false</b> — not to reset the SFTP keys</li>
	// </ul>
	ResetSftpKeys bool `json:"reset_sftp_keys,omitempty"`

	// Specify if a new SFTP password
	SftpPassword string `json:"sftp_password,omitempty"`
}

// Validate validates this storage update credentials HTTP body
func (o *StorageUpdateCredentialsHTTPBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this storage update credentials HTTP body based on context it is used
func (o *StorageUpdateCredentialsHTTPBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StorageUpdateCredentialsHTTPBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StorageUpdateCredentialsHTTPBody) UnmarshalBinary(b []byte) error {
	var res StorageUpdateCredentialsHTTPBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
