// Code generated by go-swagger; DO NOT EDIT.

package key

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Edge-Center/edgecenter-storage-sdk-go/swagger/models"
)

// KeyDeleteHTTPReader is a Reader for the KeyDeleteHTTP structure.
type KeyDeleteHTTPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KeyDeleteHTTPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewKeyDeleteHTTPNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewKeyDeleteHTTPBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewKeyDeleteHTTPNoContent creates a KeyDeleteHTTPNoContent with default headers values
func NewKeyDeleteHTTPNoContent() *KeyDeleteHTTPNoContent {
	return &KeyDeleteHTTPNoContent{}
}

/*
KeyDeleteHTTPNoContent describes a response with status code 204, with default header values.

A SuccessResponse is a response that shows that operations was completed successfully
*/
type KeyDeleteHTTPNoContent struct {
}

// IsSuccess returns true when this key delete Http no content response has a 2xx status code
func (o *KeyDeleteHTTPNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this key delete Http no content response has a 3xx status code
func (o *KeyDeleteHTTPNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this key delete Http no content response has a 4xx status code
func (o *KeyDeleteHTTPNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this key delete Http no content response has a 5xx status code
func (o *KeyDeleteHTTPNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this key delete Http no content response a status code equal to that given
func (o *KeyDeleteHTTPNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *KeyDeleteHTTPNoContent) Error() string {
	return fmt.Sprintf("[DELETE /provisioning/v1/key/{id}][%d] keyDeleteHttpNoContent ", 204)
}

func (o *KeyDeleteHTTPNoContent) String() string {
	return fmt.Sprintf("[DELETE /provisioning/v1/key/{id}][%d] keyDeleteHttpNoContent ", 204)
}

func (o *KeyDeleteHTTPNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewKeyDeleteHTTPBadRequest creates a KeyDeleteHTTPBadRequest with default headers values
func NewKeyDeleteHTTPBadRequest() *KeyDeleteHTTPBadRequest {
	return &KeyDeleteHTTPBadRequest{}
}

/*
KeyDeleteHTTPBadRequest describes a response with status code 400, with default header values.

ErrResponse
*/
type KeyDeleteHTTPBadRequest struct {
	Payload *models.ErrResponse
}

// IsSuccess returns true when this key delete Http bad request response has a 2xx status code
func (o *KeyDeleteHTTPBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this key delete Http bad request response has a 3xx status code
func (o *KeyDeleteHTTPBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this key delete Http bad request response has a 4xx status code
func (o *KeyDeleteHTTPBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this key delete Http bad request response has a 5xx status code
func (o *KeyDeleteHTTPBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this key delete Http bad request response a status code equal to that given
func (o *KeyDeleteHTTPBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *KeyDeleteHTTPBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /provisioning/v1/key/{id}][%d] keyDeleteHttpBadRequest  %+v", 400, o.Payload)
}

func (o *KeyDeleteHTTPBadRequest) String() string {
	return fmt.Sprintf("[DELETE /provisioning/v1/key/{id}][%d] keyDeleteHttpBadRequest  %+v", 400, o.Payload)
}

func (o *KeyDeleteHTTPBadRequest) GetPayload() *models.ErrResponse {
	return o.Payload
}

func (o *KeyDeleteHTTPBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
