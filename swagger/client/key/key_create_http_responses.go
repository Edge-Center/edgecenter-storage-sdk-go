// Code generated by go-swagger; DO NOT EDIT.

package key

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/G-Core/gcorelabs-storage-sdk-go/swagger/models"
)

// KeyCreateHTTPReader is a Reader for the KeyCreateHTTP structure.
type KeyCreateHTTPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KeyCreateHTTPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewKeyCreateHTTPOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewKeyCreateHTTPBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewKeyCreateHTTPConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewKeyCreateHTTPOK creates a KeyCreateHTTPOK with default headers values
func NewKeyCreateHTTPOK() *KeyCreateHTTPOK {
	return &KeyCreateHTTPOK{}
}

/* KeyCreateHTTPOK describes a response with status code 200, with default header values.

Key
*/
type KeyCreateHTTPOK struct {
	Payload *models.Key
}

func (o *KeyCreateHTTPOK) Error() string {
	return fmt.Sprintf("[PUT /provisioning/v1/key][%d] keyCreateHttpOK  %+v", 200, o.Payload)
}
func (o *KeyCreateHTTPOK) GetPayload() *models.Key {
	return o.Payload
}

func (o *KeyCreateHTTPOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Key)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKeyCreateHTTPBadRequest creates a KeyCreateHTTPBadRequest with default headers values
func NewKeyCreateHTTPBadRequest() *KeyCreateHTTPBadRequest {
	return &KeyCreateHTTPBadRequest{}
}

/* KeyCreateHTTPBadRequest describes a response with status code 400, with default header values.

ErrResponse
*/
type KeyCreateHTTPBadRequest struct {
	Payload *models.ErrResponse
}

func (o *KeyCreateHTTPBadRequest) Error() string {
	return fmt.Sprintf("[PUT /provisioning/v1/key][%d] keyCreateHttpBadRequest  %+v", 400, o.Payload)
}
func (o *KeyCreateHTTPBadRequest) GetPayload() *models.ErrResponse {
	return o.Payload
}

func (o *KeyCreateHTTPBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKeyCreateHTTPConflict creates a KeyCreateHTTPConflict with default headers values
func NewKeyCreateHTTPConflict() *KeyCreateHTTPConflict {
	return &KeyCreateHTTPConflict{}
}

/* KeyCreateHTTPConflict describes a response with status code 409, with default header values.

ErrResponse
*/
type KeyCreateHTTPConflict struct {
	Payload *models.ErrResponse
}

func (o *KeyCreateHTTPConflict) Error() string {
	return fmt.Sprintf("[PUT /provisioning/v1/key][%d] keyCreateHttpConflict  %+v", 409, o.Payload)
}
func (o *KeyCreateHTTPConflict) GetPayload() *models.ErrResponse {
	return o.Payload
}

func (o *KeyCreateHTTPConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*KeyCreateHTTPBody key create HTTP body
swagger:model KeyCreateHTTPBody
*/
type KeyCreateHTTPBody struct {

	// key
	Key string `json:"key,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this key create HTTP body
func (o *KeyCreateHTTPBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this key create HTTP body based on context it is used
func (o *KeyCreateHTTPBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *KeyCreateHTTPBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *KeyCreateHTTPBody) UnmarshalBinary(b []byte) error {
	var res KeyCreateHTTPBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
