// Code generated by go-swagger; DO NOT EDIT.

package key

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Edge-Center/edgecenter-storage-sdk-go/swagger/models"
)

// KeyListHTTPV1Reader is a Reader for the KeyListHTTPV1 structure.
type KeyListHTTPV1Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KeyListHTTPV1Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewKeyListHTTPV1OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewKeyListHTTPV1BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewKeyListHTTPV1OK creates a KeyListHTTPV1OK with default headers values
func NewKeyListHTTPV1OK() *KeyListHTTPV1OK {
	return &KeyListHTTPV1OK{}
}

/*
KeyListHTTPV1OK describes a response with status code 200, with default header values.

KeyListEndpointRes
*/
type KeyListHTTPV1OK struct {
	Payload *models.KeyListEndpointRes
}

// IsSuccess returns true when this key list Http v1 o k response has a 2xx status code
func (o *KeyListHTTPV1OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this key list Http v1 o k response has a 3xx status code
func (o *KeyListHTTPV1OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this key list Http v1 o k response has a 4xx status code
func (o *KeyListHTTPV1OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this key list Http v1 o k response has a 5xx status code
func (o *KeyListHTTPV1OK) IsServerError() bool {
	return false
}

// IsCode returns true when this key list Http v1 o k response a status code equal to that given
func (o *KeyListHTTPV1OK) IsCode(code int) bool {
	return code == 200
}

func (o *KeyListHTTPV1OK) Error() string {
	return fmt.Sprintf("[GET /provisioning/v1/key][%d] keyListHttpV1OK  %+v", 200, o.Payload)
}

func (o *KeyListHTTPV1OK) String() string {
	return fmt.Sprintf("[GET /provisioning/v1/key][%d] keyListHttpV1OK  %+v", 200, o.Payload)
}

func (o *KeyListHTTPV1OK) GetPayload() *models.KeyListEndpointRes {
	return o.Payload
}

func (o *KeyListHTTPV1OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.KeyListEndpointRes)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKeyListHTTPV1BadRequest creates a KeyListHTTPV1BadRequest with default headers values
func NewKeyListHTTPV1BadRequest() *KeyListHTTPV1BadRequest {
	return &KeyListHTTPV1BadRequest{}
}

/*
KeyListHTTPV1BadRequest describes a response with status code 400, with default header values.

ErrResponse
*/
type KeyListHTTPV1BadRequest struct {
	Payload *models.ErrResponse
}

// IsSuccess returns true when this key list Http v1 bad request response has a 2xx status code
func (o *KeyListHTTPV1BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this key list Http v1 bad request response has a 3xx status code
func (o *KeyListHTTPV1BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this key list Http v1 bad request response has a 4xx status code
func (o *KeyListHTTPV1BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this key list Http v1 bad request response has a 5xx status code
func (o *KeyListHTTPV1BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this key list Http v1 bad request response a status code equal to that given
func (o *KeyListHTTPV1BadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *KeyListHTTPV1BadRequest) Error() string {
	return fmt.Sprintf("[GET /provisioning/v1/key][%d] keyListHttpV1BadRequest  %+v", 400, o.Payload)
}

func (o *KeyListHTTPV1BadRequest) String() string {
	return fmt.Sprintf("[GET /provisioning/v1/key][%d] keyListHttpV1BadRequest  %+v", 400, o.Payload)
}

func (o *KeyListHTTPV1BadRequest) GetPayload() *models.ErrResponse {
	return o.Payload
}

func (o *KeyListHTTPV1BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
