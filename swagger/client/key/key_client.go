// Code generated by go-swagger; DO NOT EDIT.

package key

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new key API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for key API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	KeyCreateHTTP(params *KeyCreateHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KeyCreateHTTPOK, error)

	KeyDeleteHTTP(params *KeyDeleteHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KeyDeleteHTTPNoContent, error)

	KeyListHTTPV1(params *KeyListHTTPV1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KeyListHTTPV1OK, error)

	KeyListHTTPV2(params *KeyListHTTPV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KeyListHTTPV2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  KeyCreateHTTP creates key

  Creates key and returns it
*/
func (a *Client) KeyCreateHTTP(params *KeyCreateHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KeyCreateHTTPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKeyCreateHTTPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "keyCreateHttp",
		Method:             "PUT",
		PathPattern:        "/provisioning/v1/key",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KeyCreateHTTPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KeyCreateHTTPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for keyCreateHttp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  KeyDeleteHTTP deletes key

  Deletes key
*/
func (a *Client) KeyDeleteHTTP(params *KeyDeleteHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KeyDeleteHTTPNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKeyDeleteHTTPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "keyDeleteHttp",
		Method:             "DELETE",
		PathPattern:        "/provisioning/v1/key/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KeyDeleteHTTPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KeyDeleteHTTPNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for keyDeleteHttp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  KeyListHTTPV1 shows all keys

  Shows all keys
*/
func (a *Client) KeyListHTTPV1(params *KeyListHTTPV1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KeyListHTTPV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKeyListHTTPV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "keyListHttpV1",
		Method:             "GET",
		PathPattern:        "/provisioning/v1/key",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KeyListHTTPV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KeyListHTTPV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for keyListHttpV1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  KeyListHTTPV2 shows all keys

  Shows all keys
*/
func (a *Client) KeyListHTTPV2(params *KeyListHTTPV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KeyListHTTPV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKeyListHTTPV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "keyListHttpV2",
		Method:             "GET",
		PathPattern:        "/provisioning/v2/key",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KeyListHTTPV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KeyListHTTPV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for keyListHttpV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
