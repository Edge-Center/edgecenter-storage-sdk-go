// Code generated by go-swagger; DO NOT EDIT.

package key

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewKeyListHTTPV2Params creates a new KeyListHTTPV2Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewKeyListHTTPV2Params() *KeyListHTTPV2Params {
	return &KeyListHTTPV2Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewKeyListHTTPV2ParamsWithTimeout creates a new KeyListHTTPV2Params object
// with the ability to set a timeout on a request.
func NewKeyListHTTPV2ParamsWithTimeout(timeout time.Duration) *KeyListHTTPV2Params {
	return &KeyListHTTPV2Params{
		timeout: timeout,
	}
}

// NewKeyListHTTPV2ParamsWithContext creates a new KeyListHTTPV2Params object
// with the ability to set a context for a request.
func NewKeyListHTTPV2ParamsWithContext(ctx context.Context) *KeyListHTTPV2Params {
	return &KeyListHTTPV2Params{
		Context: ctx,
	}
}

// NewKeyListHTTPV2ParamsWithHTTPClient creates a new KeyListHTTPV2Params object
// with the ability to set a custom HTTPClient for a request.
func NewKeyListHTTPV2ParamsWithHTTPClient(client *http.Client) *KeyListHTTPV2Params {
	return &KeyListHTTPV2Params{
		HTTPClient: client,
	}
}

/*
KeyListHTTPV2Params contains all the parameters to send to the API endpoint

	for the key list Http v2 operation.

	Typically these are written to a http.Request.
*/
type KeyListHTTPV2Params struct {

	// Created.
	Created *string

	// ID.
	ID *string

	/* Limit.

	   Max number of records in response

	   Format: uint64
	*/
	Limit *uint64

	// Name.
	Name *string

	/* Offset.

	   Amount of records to skip before beginning to write in response.

	   Format: uint64
	*/
	Offset *uint64

	/* OrderBy.

	   Field name to sort by
	*/
	OrderBy *string

	/* OrderDirection.

	   Ascending or descending order
	*/
	OrderDirection *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the key list Http v2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *KeyListHTTPV2Params) WithDefaults() *KeyListHTTPV2Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the key list Http v2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *KeyListHTTPV2Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the key list Http v2 params
func (o *KeyListHTTPV2Params) WithTimeout(timeout time.Duration) *KeyListHTTPV2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the key list Http v2 params
func (o *KeyListHTTPV2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the key list Http v2 params
func (o *KeyListHTTPV2Params) WithContext(ctx context.Context) *KeyListHTTPV2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the key list Http v2 params
func (o *KeyListHTTPV2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the key list Http v2 params
func (o *KeyListHTTPV2Params) WithHTTPClient(client *http.Client) *KeyListHTTPV2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the key list Http v2 params
func (o *KeyListHTTPV2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCreated adds the created to the key list Http v2 params
func (o *KeyListHTTPV2Params) WithCreated(created *string) *KeyListHTTPV2Params {
	o.SetCreated(created)
	return o
}

// SetCreated adds the created to the key list Http v2 params
func (o *KeyListHTTPV2Params) SetCreated(created *string) {
	o.Created = created
}

// WithID adds the id to the key list Http v2 params
func (o *KeyListHTTPV2Params) WithID(id *string) *KeyListHTTPV2Params {
	o.SetID(id)
	return o
}

// SetID adds the id to the key list Http v2 params
func (o *KeyListHTTPV2Params) SetID(id *string) {
	o.ID = id
}

// WithLimit adds the limit to the key list Http v2 params
func (o *KeyListHTTPV2Params) WithLimit(limit *uint64) *KeyListHTTPV2Params {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the key list Http v2 params
func (o *KeyListHTTPV2Params) SetLimit(limit *uint64) {
	o.Limit = limit
}

// WithName adds the name to the key list Http v2 params
func (o *KeyListHTTPV2Params) WithName(name *string) *KeyListHTTPV2Params {
	o.SetName(name)
	return o
}

// SetName adds the name to the key list Http v2 params
func (o *KeyListHTTPV2Params) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the key list Http v2 params
func (o *KeyListHTTPV2Params) WithOffset(offset *uint64) *KeyListHTTPV2Params {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the key list Http v2 params
func (o *KeyListHTTPV2Params) SetOffset(offset *uint64) {
	o.Offset = offset
}

// WithOrderBy adds the orderBy to the key list Http v2 params
func (o *KeyListHTTPV2Params) WithOrderBy(orderBy *string) *KeyListHTTPV2Params {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the key list Http v2 params
func (o *KeyListHTTPV2Params) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithOrderDirection adds the orderDirection to the key list Http v2 params
func (o *KeyListHTTPV2Params) WithOrderDirection(orderDirection *string) *KeyListHTTPV2Params {
	o.SetOrderDirection(orderDirection)
	return o
}

// SetOrderDirection adds the orderDirection to the key list Http v2 params
func (o *KeyListHTTPV2Params) SetOrderDirection(orderDirection *string) {
	o.OrderDirection = orderDirection
}

// WriteToRequest writes these params to a swagger request
func (o *KeyListHTTPV2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Created != nil {

		// query param created
		var qrCreated string

		if o.Created != nil {
			qrCreated = *o.Created
		}
		qCreated := qrCreated
		if qCreated != "" {

			if err := r.SetQueryParam("created", qCreated); err != nil {
				return err
			}
		}
	}

	if o.ID != nil {

		// query param id
		var qrID string

		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {

			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit uint64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatUint64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset uint64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatUint64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// query param order_by
		var qrOrderBy string

		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {

			if err := r.SetQueryParam("order_by", qOrderBy); err != nil {
				return err
			}
		}
	}

	if o.OrderDirection != nil {

		// query param order_direction
		var qrOrderDirection string

		if o.OrderDirection != nil {
			qrOrderDirection = *o.OrderDirection
		}
		qOrderDirection := qrOrderDirection
		if qOrderDirection != "" {

			if err := r.SetQueryParam("order_direction", qOrderDirection); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
