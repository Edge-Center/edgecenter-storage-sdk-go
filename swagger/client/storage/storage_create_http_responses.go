// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/G-Core/gcore-storage-sdk-go/swagger/models"
)

// StorageCreateHTTPReader is a Reader for the StorageCreateHTTP structure.
type StorageCreateHTTPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StorageCreateHTTPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStorageCreateHTTPOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStorageCreateHTTPBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewStorageCreateHTTPConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStorageCreateHTTPOK creates a StorageCreateHTTPOK with default headers values
func NewStorageCreateHTTPOK() *StorageCreateHTTPOK {
	return &StorageCreateHTTPOK{}
}

/* StorageCreateHTTPOK describes a response with status code 200, with default header values.

Storage
*/
type StorageCreateHTTPOK struct {
	Payload *models.Storage
}

func (o *StorageCreateHTTPOK) Error() string {
	return fmt.Sprintf("[PUT /provisioning/v1/storage][%d] storageCreateHttpOK  %+v", 200, o.Payload)
}
func (o *StorageCreateHTTPOK) GetPayload() *models.Storage {
	return o.Payload
}

func (o *StorageCreateHTTPOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Storage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStorageCreateHTTPBadRequest creates a StorageCreateHTTPBadRequest with default headers values
func NewStorageCreateHTTPBadRequest() *StorageCreateHTTPBadRequest {
	return &StorageCreateHTTPBadRequest{}
}

/* StorageCreateHTTPBadRequest describes a response with status code 400, with default header values.

ErrResponse
*/
type StorageCreateHTTPBadRequest struct {
	Payload *models.ErrResponse
}

func (o *StorageCreateHTTPBadRequest) Error() string {
	return fmt.Sprintf("[PUT /provisioning/v1/storage][%d] storageCreateHttpBadRequest  %+v", 400, o.Payload)
}
func (o *StorageCreateHTTPBadRequest) GetPayload() *models.ErrResponse {
	return o.Payload
}

func (o *StorageCreateHTTPBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStorageCreateHTTPConflict creates a StorageCreateHTTPConflict with default headers values
func NewStorageCreateHTTPConflict() *StorageCreateHTTPConflict {
	return &StorageCreateHTTPConflict{}
}

/* StorageCreateHTTPConflict describes a response with status code 409, with default header values.

ErrResponse
*/
type StorageCreateHTTPConflict struct {
	Payload *models.ErrResponse
}

func (o *StorageCreateHTTPConflict) Error() string {
	return fmt.Sprintf("[PUT /provisioning/v1/storage][%d] storageCreateHttpConflict  %+v", 409, o.Payload)
}
func (o *StorageCreateHTTPConflict) GetPayload() *models.ErrResponse {
	return o.Payload
}

func (o *StorageCreateHTTPConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*StorageCreateHTTPBody storage create HTTP body
swagger:model StorageCreateHTTPBody
*/
type StorageCreateHTTPBody struct {

	// generate sftp password
	GenerateSftpPassword bool `json:"generate_sftp_password,omitempty"`

	// location
	// Enum: [s-ed1 s-darz1 s-ws1 ams sin fra mia]
	Location string `json:"location,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// sftp password
	SftpPassword string `json:"sftp_password,omitempty"`

	// type
	// Enum: [sftp s3]
	Type string `json:"type,omitempty"`
}

// Validate validates this storage create HTTP body
func (o *StorageCreateHTTPBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storageCreateHttpBodyTypeLocationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["s-ed1","s-darz1","s-ws1","ams","sin","fra","mia"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageCreateHttpBodyTypeLocationPropEnum = append(storageCreateHttpBodyTypeLocationPropEnum, v)
	}
}

const (

	// StorageCreateHTTPBodyLocationSDashEd1 captures enum value "s-ed1"
	StorageCreateHTTPBodyLocationSDashEd1 string = "s-ed1"

	// StorageCreateHTTPBodyLocationSDashDarz1 captures enum value "s-darz1"
	StorageCreateHTTPBodyLocationSDashDarz1 string = "s-darz1"

	// StorageCreateHTTPBodyLocationSDashWs1 captures enum value "s-ws1"
	StorageCreateHTTPBodyLocationSDashWs1 string = "s-ws1"

	// StorageCreateHTTPBodyLocationAms captures enum value "ams"
	StorageCreateHTTPBodyLocationAms string = "ams"

	// StorageCreateHTTPBodyLocationSin captures enum value "sin"
	StorageCreateHTTPBodyLocationSin string = "sin"

	// StorageCreateHTTPBodyLocationFra captures enum value "fra"
	StorageCreateHTTPBodyLocationFra string = "fra"

	// StorageCreateHTTPBodyLocationMia captures enum value "mia"
	StorageCreateHTTPBodyLocationMia string = "mia"
)

// prop value enum
func (o *StorageCreateHTTPBody) validateLocationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageCreateHttpBodyTypeLocationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *StorageCreateHTTPBody) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(o.Location) { // not required
		return nil
	}

	// value enum
	if err := o.validateLocationEnum("Body"+"."+"location", "body", o.Location); err != nil {
		return err
	}

	return nil
}

var storageCreateHttpBodyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sftp","s3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storageCreateHttpBodyTypeTypePropEnum = append(storageCreateHttpBodyTypeTypePropEnum, v)
	}
}

const (

	// StorageCreateHTTPBodyTypeSftp captures enum value "sftp"
	StorageCreateHTTPBodyTypeSftp string = "sftp"

	// StorageCreateHTTPBodyTypeS3 captures enum value "s3"
	StorageCreateHTTPBodyTypeS3 string = "s3"
)

// prop value enum
func (o *StorageCreateHTTPBody) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, storageCreateHttpBodyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *StorageCreateHTTPBody) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("Body"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this storage create HTTP body based on context it is used
func (o *StorageCreateHTTPBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StorageCreateHTTPBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StorageCreateHTTPBody) UnmarshalBinary(b []byte) error {
	var res StorageCreateHTTPBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
