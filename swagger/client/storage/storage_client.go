// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new storage API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for storage API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	KeyLinkHTTP(params *KeyLinkHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KeyLinkHTTPNoContent, error)

	KeyUnlinkHTTP(params *KeyUnlinkHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KeyUnlinkHTTPNoContent, error)

	StorageCreateHTTP(params *StorageCreateHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StorageCreateHTTPOK, error)

	StorageDeleteHTTP(params *StorageDeleteHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StorageDeleteHTTPNoContent, error)

	StorageGetHTTP(params *StorageGetHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StorageGetHTTPOK, error)

	StorageListHTTPV1(params *StorageListHTTPV1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StorageListHTTPV1OK, error)

	StorageListHTTPV2(params *StorageListHTTPV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StorageListHTTPV2OK, error)

	StorageUpdateCredentialsHTTP(params *StorageUpdateCredentialsHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StorageUpdateCredentialsHTTPOK, error)

	StorageUpdateHTTP(params *StorageUpdateHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StorageUpdateHTTPOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  KeyLinkHTTP links key to storage

  Link key to storage
*/
func (a *Client) KeyLinkHTTP(params *KeyLinkHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KeyLinkHTTPNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKeyLinkHTTPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "keyLinkHttp",
		Method:             "POST",
		PathPattern:        "/provisioning/v1/storage/{id}/key/{key_id}/link",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KeyLinkHTTPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KeyLinkHTTPNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for keyLinkHttp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  KeyUnlinkHTTP unlinks key from storage

  Unlink key from storage
*/
func (a *Client) KeyUnlinkHTTP(params *KeyUnlinkHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*KeyUnlinkHTTPNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKeyUnlinkHTTPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "keyUnlinkHttp",
		Method:             "POST",
		PathPattern:        "/provisioning/v1/storage/{id}/key/{key_id}/unlink",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &KeyUnlinkHTTPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KeyUnlinkHTTPNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for keyUnlinkHttp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StorageCreateHTTP creates storage

  Creates storage and returns it
*/
func (a *Client) StorageCreateHTTP(params *StorageCreateHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StorageCreateHTTPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageCreateHTTPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "storageCreateHttp",
		Method:             "PUT",
		PathPattern:        "/provisioning/v1/storage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StorageCreateHTTPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageCreateHTTPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storageCreateHttp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StorageDeleteHTTP deletes storage

  Delete storage
*/
func (a *Client) StorageDeleteHTTP(params *StorageDeleteHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StorageDeleteHTTPNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageDeleteHTTPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "storageDeleteHttp",
		Method:             "DELETE",
		PathPattern:        "/provisioning/v1/storage/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StorageDeleteHTTPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageDeleteHTTPNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storageDeleteHttp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StorageGetHTTP gets storage

  Get storage
*/
func (a *Client) StorageGetHTTP(params *StorageGetHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StorageGetHTTPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageGetHTTPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "storageGetHttp",
		Method:             "GET",
		PathPattern:        "/provisioning/v1/storage/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StorageGetHTTPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageGetHTTPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storageGetHttp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StorageListHTTPV1 lists storages

  List storages
*/
func (a *Client) StorageListHTTPV1(params *StorageListHTTPV1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StorageListHTTPV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageListHTTPV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "storageListHttpV1",
		Method:             "GET",
		PathPattern:        "/provisioning/v1/storage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StorageListHTTPV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageListHTTPV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storageListHttpV1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StorageListHTTPV2 lists storages v2

  List storages v2
*/
func (a *Client) StorageListHTTPV2(params *StorageListHTTPV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StorageListHTTPV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageListHTTPV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "storageListHttpV2",
		Method:             "GET",
		PathPattern:        "/provisioning/v2/storage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StorageListHTTPV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageListHTTPV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storageListHttpV2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StorageUpdateCredentialsHTTP resets storage credentials

  Reset storage credentials
*/
func (a *Client) StorageUpdateCredentialsHTTP(params *StorageUpdateCredentialsHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StorageUpdateCredentialsHTTPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageUpdateCredentialsHTTPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "storageUpdateCredentialsHttp",
		Method:             "POST",
		PathPattern:        "/provisioning/v1/storage/{id}/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StorageUpdateCredentialsHTTPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageUpdateCredentialsHTTPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storageUpdateCredentialsHttp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StorageUpdateHTTP updates storage

  Updates storage and returns it
*/
func (a *Client) StorageUpdateHTTP(params *StorageUpdateHTTPParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StorageUpdateHTTPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStorageUpdateHTTPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "storageUpdateHttp",
		Method:             "POST",
		PathPattern:        "/provisioning/v1/storage/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StorageUpdateHTTPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StorageUpdateHTTPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for storageUpdateHttp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
