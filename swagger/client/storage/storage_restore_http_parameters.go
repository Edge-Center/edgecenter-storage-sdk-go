// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewStorageRestoreHTTPParams creates a new StorageRestoreHTTPParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewStorageRestoreHTTPParams() *StorageRestoreHTTPParams {
	return &StorageRestoreHTTPParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewStorageRestoreHTTPParamsWithTimeout creates a new StorageRestoreHTTPParams object
// with the ability to set a timeout on a request.
func NewStorageRestoreHTTPParamsWithTimeout(timeout time.Duration) *StorageRestoreHTTPParams {
	return &StorageRestoreHTTPParams{
		timeout: timeout,
	}
}

// NewStorageRestoreHTTPParamsWithContext creates a new StorageRestoreHTTPParams object
// with the ability to set a context for a request.
func NewStorageRestoreHTTPParamsWithContext(ctx context.Context) *StorageRestoreHTTPParams {
	return &StorageRestoreHTTPParams{
		Context: ctx,
	}
}

// NewStorageRestoreHTTPParamsWithHTTPClient creates a new StorageRestoreHTTPParams object
// with the ability to set a custom HTTPClient for a request.
func NewStorageRestoreHTTPParamsWithHTTPClient(client *http.Client) *StorageRestoreHTTPParams {
	return &StorageRestoreHTTPParams{
		HTTPClient: client,
	}
}

/*
StorageRestoreHTTPParams contains all the parameters to send to the API endpoint

	for the storage restore Http operation.

	Typically these are written to a http.Request.
*/
type StorageRestoreHTTPParams struct {

	// ClientID.
	//
	// Format: int64
	ClientID *int64

	// ID.
	//
	// Format: int64
	ID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the storage restore Http params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StorageRestoreHTTPParams) WithDefaults() *StorageRestoreHTTPParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the storage restore Http params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StorageRestoreHTTPParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the storage restore Http params
func (o *StorageRestoreHTTPParams) WithTimeout(timeout time.Duration) *StorageRestoreHTTPParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the storage restore Http params
func (o *StorageRestoreHTTPParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the storage restore Http params
func (o *StorageRestoreHTTPParams) WithContext(ctx context.Context) *StorageRestoreHTTPParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the storage restore Http params
func (o *StorageRestoreHTTPParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the storage restore Http params
func (o *StorageRestoreHTTPParams) WithHTTPClient(client *http.Client) *StorageRestoreHTTPParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the storage restore Http params
func (o *StorageRestoreHTTPParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClientID adds the clientID to the storage restore Http params
func (o *StorageRestoreHTTPParams) WithClientID(clientID *int64) *StorageRestoreHTTPParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the storage restore Http params
func (o *StorageRestoreHTTPParams) SetClientID(clientID *int64) {
	o.ClientID = clientID
}

// WithID adds the id to the storage restore Http params
func (o *StorageRestoreHTTPParams) WithID(id int64) *StorageRestoreHTTPParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the storage restore Http params
func (o *StorageRestoreHTTPParams) SetID(id int64) {
	o.ID = id
}

// WriteToRequest writes these params to a swagger request
func (o *StorageRestoreHTTPParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClientID != nil {

		// query param client_id
		var qrClientID int64

		if o.ClientID != nil {
			qrClientID = *o.ClientID
		}
		qClientID := swag.FormatInt64(qrClientID)
		if qClientID != "" {

			if err := r.SetQueryParam("client_id", qClientID); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
